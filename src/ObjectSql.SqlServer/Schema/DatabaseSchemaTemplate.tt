//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from database.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Data" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
using System;
using System.Configuration;
using System.Data.SqlClient;
using System.Collections.Generic;
using ObjectSql;
using ObjectSql.QueryInterfaces;

namespace <#= Namespace#>
{
<# 
	string currentSchema = null;
	foreach(var tbl in Schema.Tables) 
	{
		if (currentSchema != tbl.Schema) 
		{
			if (currentSchema != null)
			{
#>	}
<#			}
#>	namespace <#=tbl.Schema#>
	{
<#
			currentSchema = tbl.Schema;
		}

#>		[Table("<#=tbl.Name#>",Schema="<#=tbl.Schema#>")]
		public partial class <#=ToValidName(tbl.Name)#>
		{
<#
			foreach(var col in tbl.Columns)
			{
#>
			[Column("<#=col.Name#>",TypeName="<#=col.DataType#>")] public <#=ToTypeName(col.NetType,col.IsNullable)#> <#=ToValidName(col.Name)#> {get; set;}
<#
			}
#>
		}

<#

	}
#>
	}

	public partial class <#=ConnStrName#>Context
	{
		private string _connectionString;
		private ObjectSqlManager<SqlConnection> _sqlServerManager;

		public <#=ConnStrName#>Context()
		{
			_connectionString = ConfigurationManager.ConnectionStrings["<#=ConnStrName#>"].ConnectionString;
			_sqlServerManager = new ObjectSqlManager<SqlConnection>(_connectionString);
		}

		public IDatabaseContextHolder<<#=ConnStrName#>Context> Query()
		{
			return _sqlServerManager.Query().WithContext<<#=ConnStrName#>Context>();
		}
	}

	public abstract class <#=ConnStrName#>ProceduresHolder
	{
<# 
		foreach(var proc in Schema.Procedures)
		{
#>
		[Procedure("<#=proc.Name#>", "<#=proc.Schema#>")] public abstract void <#=ToValidName(proc.Name)#>(<#
			foreach(var p in proc.Parameters){#><#=p.Position>1?", ":""#>[Parameter("<#=p.Name.Replace("@","")#>", "<#=p.DataType#>", <#=p.Direction#>)] <#=ToTypeName(p.NetType,true)#> <#=ToValidName(p.Name)#><#}#>);
<#
		}
#>
	}

	public static partial class <#=ConnStrName#>ProceduresExtension
	{
<# 
		foreach(var proc in Schema.Procedures)
		{
#>
		public static IQueryEnd <#=ToValidName(proc.Name)#>(this IDatabaseContextHolder<<#=ConnStrName#>Context> holder<#
			foreach(var p in proc.Parameters){#>,<#	if(IsOut(p)){#>out <#}if(IsInOut(p)){#>ref <#}#><#=ToTypeName(p.NetType,true)#> <#=ToValidName(p.Name)#><#}#>)
		{
<#
			foreach(var p in proc.Parameters.Where(IsOut))
			{
#>
			var <#=ToValidName(p.Name)#>_out = default(<#=ToTypeName(p.NetType,true)#>);
<#
			}
#>
<#
			foreach(var p in proc.Parameters.Where(IsInOut))
			{
#>
			var <#=ToValidName(p.Name)#>_ref = <#=ToValidName(p.Name)#>;
<#
			}
#>
			var ___lresl___ = holder.Exec<<#=ConnStrName#>ProceduresHolder>(h=>h.<#=ToValidName(proc.Name)#>(<#
				foreach(var p in proc.Parameters){#><#=p.Position>1?", ":""#><#=ToValidName(p.Name)#><#if(IsOut(p)){#>_out<#} if(IsInOut(p)){#>_ref<#}#><#}#>));
<#
			foreach(var p in proc.Parameters.Where(IsInOut))
			{
#>
			<#=ToValidName(p.Name)#> = <#=ToValidName(p.Name)#>_ref;
<#
			}
			foreach(var p in proc.Parameters.Where(IsOut))
			{
#>
			<#=ToValidName(p.Name)#> = <#=ToValidName(p.Name)#>_out;
<#
			}
#>
			return ___lresl___;
		}
<#
		}
#>
	}
}