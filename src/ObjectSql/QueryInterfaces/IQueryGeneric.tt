<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
using System;
using System.Linq.Expressions;

namespace ObjectSql.QueryInterfaces
{
<#
int depth = 10;
for (int i = 1;i<=depth; i++)
{#>
	public interface IQuery<<#=TemplatesSeq(i)#>>
	{
		IQuery<<#=TemplatesSeq(i)#>> Where(Expression<Func<<#=TemplatesSeq(i)#>, bool>> condition);
<# if (i != depth) { #>
		IQuery<<#=TemplatesSeq(i)#>, TNewSource> Join<TNewSource>(Expression<Func<<#=TemplatesSeq(i)#>, TNewSource, bool>> condition);
<#}#>
		IQueryEnd<TEntity> Select<TEntity>(Expression<Func<<#=TemplatesSeq(i)#>,TEntity>> select);
		IQuery<<#=TemplatesSeq(i)#>> GroupBy(Expression<Func<<#=TemplatesSeq(i)#>,object>> groupBy);
	}
<#
}
#>
}
<#+
private string TemplatesSeq(int depth)
{
	var sb = new StringBuilder();
	for(int i = 1;i<=depth;i++)
	{
		if (i>1)
			sb.Append(",");
		sb.AppendFormat("TSource{0}",i);
		
	}
	return sb.ToString();
}

#>
